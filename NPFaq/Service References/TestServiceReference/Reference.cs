//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.0
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace NPFaq.TestServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="faq_category", Namespace="http://schemas.datacontract.org/2004/07/NPFaq.Web")]
    public partial class faq_category : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CategoryNameField;
        
        private int IDField;
        
        private System.Nullable<int> ParentIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> faq_questionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentID {
            get {
                return this.ParentIDField;
            }
            set {
                if ((this.ParentIDField.Equals(value) != true)) {
                    this.ParentIDField = value;
                    this.RaisePropertyChanged("ParentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> faq_question {
            get {
                return this.faq_questionField;
            }
            set {
                if ((object.ReferenceEquals(this.faq_questionField, value) != true)) {
                    this.faq_questionField = value;
                    this.RaisePropertyChanged("faq_question");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="faq_question", Namespace="http://schemas.datacontract.org/2004/07/NPFaq.Web")]
    public partial class faq_question : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> CategoryIDField;
        
        private int IDField;
        
        private System.Nullable<bool> IsSolvedField;
        
        private string KeyWordField;
        
        private string QuestionField;
        
        private string QuestionerField;
        
        private System.Nullable<int> SearchCountField;
        
        private System.Nullable<System.DateTime> TimeField;
        
        private System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer> faq_answerField;
        
        private System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_attach> faq_attachField;
        
        private NPFaq.TestServiceReference.faq_category faq_categoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CategoryID {
            get {
                return this.CategoryIDField;
            }
            set {
                if ((this.CategoryIDField.Equals(value) != true)) {
                    this.CategoryIDField = value;
                    this.RaisePropertyChanged("CategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsSolved {
            get {
                return this.IsSolvedField;
            }
            set {
                if ((this.IsSolvedField.Equals(value) != true)) {
                    this.IsSolvedField = value;
                    this.RaisePropertyChanged("IsSolved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyWord {
            get {
                return this.KeyWordField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyWordField, value) != true)) {
                    this.KeyWordField = value;
                    this.RaisePropertyChanged("KeyWord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Question {
            get {
                return this.QuestionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionField, value) != true)) {
                    this.QuestionField = value;
                    this.RaisePropertyChanged("Question");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Questioner {
            get {
                return this.QuestionerField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionerField, value) != true)) {
                    this.QuestionerField = value;
                    this.RaisePropertyChanged("Questioner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SearchCount {
            get {
                return this.SearchCountField;
            }
            set {
                if ((this.SearchCountField.Equals(value) != true)) {
                    this.SearchCountField = value;
                    this.RaisePropertyChanged("SearchCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer> faq_answer {
            get {
                return this.faq_answerField;
            }
            set {
                if ((object.ReferenceEquals(this.faq_answerField, value) != true)) {
                    this.faq_answerField = value;
                    this.RaisePropertyChanged("faq_answer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_attach> faq_attach {
            get {
                return this.faq_attachField;
            }
            set {
                if ((object.ReferenceEquals(this.faq_attachField, value) != true)) {
                    this.faq_attachField = value;
                    this.RaisePropertyChanged("faq_attach");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPFaq.TestServiceReference.faq_category faq_category {
            get {
                return this.faq_categoryField;
            }
            set {
                if ((object.ReferenceEquals(this.faq_categoryField, value) != true)) {
                    this.faq_categoryField = value;
                    this.RaisePropertyChanged("faq_category");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="faq_answer", Namespace="http://schemas.datacontract.org/2004/07/NPFaq.Web")]
    public partial class faq_answer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AnswerField;
        
        private string AnswererField;
        
        private int IDField;
        
        private System.Nullable<int> OrderField;
        
        private int QuestionIDField;
        
        private System.Nullable<System.DateTime> TimeField;
        
        private NPFaq.TestServiceReference.faq_question faq_questionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Answer {
            get {
                return this.AnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerField, value) != true)) {
                    this.AnswerField = value;
                    this.RaisePropertyChanged("Answer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Answerer {
            get {
                return this.AnswererField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswererField, value) != true)) {
                    this.AnswererField = value;
                    this.RaisePropertyChanged("Answerer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionID {
            get {
                return this.QuestionIDField;
            }
            set {
                if ((this.QuestionIDField.Equals(value) != true)) {
                    this.QuestionIDField = value;
                    this.RaisePropertyChanged("QuestionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPFaq.TestServiceReference.faq_question faq_question {
            get {
                return this.faq_questionField;
            }
            set {
                if ((object.ReferenceEquals(this.faq_questionField, value) != true)) {
                    this.faq_questionField = value;
                    this.RaisePropertyChanged("faq_question");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="faq_attach", Namespace="http://schemas.datacontract.org/2004/07/NPFaq.Web")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(NPFaq.TestServiceReference.Attach))]
    public partial class faq_attach : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AnswererField;
        
        private int IDField;
        
        private string PathField;
        
        private int QuestionIDField;
        
        private System.Nullable<System.DateTime> TimeField;
        
        private string TypeField;
        
        private NPFaq.TestServiceReference.faq_question faq_questionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Answerer {
            get {
                return this.AnswererField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswererField, value) != true)) {
                    this.AnswererField = value;
                    this.RaisePropertyChanged("Answerer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionID {
            get {
                return this.QuestionIDField;
            }
            set {
                if ((this.QuestionIDField.Equals(value) != true)) {
                    this.QuestionIDField = value;
                    this.RaisePropertyChanged("QuestionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NPFaq.TestServiceReference.faq_question faq_question {
            get {
                return this.faq_questionField;
            }
            set {
                if ((object.ReferenceEquals(this.faq_questionField, value) != true)) {
                    this.faq_questionField = value;
                    this.RaisePropertyChanged("faq_question");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Attach", Namespace="http://schemas.datacontract.org/2004/07/NPFaq.Web.Models")]
    public partial class Attach : NPFaq.TestServiceReference.faq_attach {
        
        private long SizeField;
        
        private byte[] ThumbnailField;
        
        private string URLField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Thumbnail {
            get {
                return this.ThumbnailField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbnailField, value) != true)) {
                    this.ThumbnailField = value;
                    this.RaisePropertyChanged("Thumbnail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="faq_user", Namespace="http://schemas.datacontract.org/2004/07/NPFaq.Web")]
    public partial class faq_user : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IDField;
        
        private string PasswordField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServiceReference.ITestService")]
    public interface ITestService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetAllCategorys", ReplyAction="http://tempuri.org/ITestService/GetAllCategorysResponse")]
        System.IAsyncResult BeginGetAllCategorys(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_category> EndGetAllCategorys(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/AddCategory", ReplyAction="http://tempuri.org/ITestService/AddCategoryResponse")]
        System.IAsyncResult BeginAddCategory(string categoryName, System.AsyncCallback callback, object asyncState);
        
        int EndAddCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/DeleteCategory", ReplyAction="http://tempuri.org/ITestService/DeleteCategoryResponse")]
        System.IAsyncResult BeginDeleteCategory(int id, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetCountOfCategory", ReplyAction="http://tempuri.org/ITestService/GetCountOfCategoryResponse")]
        System.IAsyncResult BeginGetCountOfCategory(int categoryID, System.AsyncCallback callback, object asyncState);
        
        int EndGetCountOfCategory(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetPagedQuestions", ReplyAction="http://tempuri.org/ITestService/GetPagedQuestionsResponse")]
        System.IAsyncResult BeginGetPagedQuestions(int pageSize, int currentPage, int categoryID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> EndGetPagedQuestions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetAnswersByID", ReplyAction="http://tempuri.org/ITestService/GetAnswersByIDResponse")]
        System.IAsyncResult BeginGetAnswersByID(int id, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer> EndGetAnswersByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/SearchFaqs", ReplyAction="http://tempuri.org/ITestService/SearchFaqsResponse")]
        System.IAsyncResult BeginSearchFaqs(string keyWord, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> EndSearchFaqs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetAllQuestion", ReplyAction="http://tempuri.org/ITestService/GetAllQuestionResponse")]
        System.IAsyncResult BeginGetAllQuestion(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> EndGetAllQuestion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetQuestionByID", ReplyAction="http://tempuri.org/ITestService/GetQuestionByIDResponse")]
        System.IAsyncResult BeginGetQuestionByID(int id, System.AsyncCallback callback, object asyncState);
        
        NPFaq.TestServiceReference.faq_question EndGetQuestionByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetAttachsByQID", ReplyAction="http://tempuri.org/ITestService/GetAttachsByQIDResponse")]
        System.IAsyncResult BeginGetAttachsByQID(int id, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.Attach> EndGetAttachsByQID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetImagesByQuestionID", ReplyAction="http://tempuri.org/ITestService/GetImagesByQuestionIDResponse")]
        System.IAsyncResult BeginGetImagesByQuestionID(int id, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetImagesByQuestionID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/AddOrUpdateQuestion", ReplyAction="http://tempuri.org/ITestService/AddOrUpdateQuestionResponse")]
        System.IAsyncResult BeginAddOrUpdateQuestion(NPFaq.TestServiceReference.faq_question question, System.AsyncCallback callback, object asyncState);
        
        int EndAddOrUpdateQuestion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/AddAnswer", ReplyAction="http://tempuri.org/ITestService/AddAnswerResponse")]
        System.IAsyncResult BeginAddAnswer(NPFaq.TestServiceReference.faq_answer answer, System.AsyncCallback callback, object asyncState);
        
        int EndAddAnswer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/AddFaq_Attachs", ReplyAction="http://tempuri.org/ITestService/AddFaq_AttachsResponse")]
        System.IAsyncResult BeginAddFaq_Attachs(System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_attach> attachs, System.AsyncCallback callback, object asyncState);
        
        bool EndAddFaq_Attachs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/DeleteFaqByID", ReplyAction="http://tempuri.org/ITestService/DeleteFaqByIDResponse")]
        System.IAsyncResult BeginDeleteFaqByID(System.Collections.ObjectModel.ObservableCollection<int> faqID, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteFaqByID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/Login", ReplyAction="http://tempuri.org/ITestService/LoginResponse")]
        System.IAsyncResult BeginLogin(string userName, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITestService/GetAllUsers", ReplyAction="http://tempuri.org/ITestService/GetAllUsersResponse")]
        System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_user> EndGetAllUsers(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceChannel : NPFaq.TestServiceReference.ITestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCategorysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCategorysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_category> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_category>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountOfCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountOfCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPagedQuestionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPagedQuestionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAnswersByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAnswersByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchFaqsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchFaqsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllQuestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllQuestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQuestionByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQuestionByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NPFaq.TestServiceReference.faq_question Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NPFaq.TestServiceReference.faq_question)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAttachsByQIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAttachsByQIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.Attach> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.Attach>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetImagesByQuestionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetImagesByQuestionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddOrUpdateQuestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddOrUpdateQuestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddAnswerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddAnswerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFaq_AttachsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFaq_AttachsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteFaqByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteFaqByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_user> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_user>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<NPFaq.TestServiceReference.ITestService>, NPFaq.TestServiceReference.ITestService {
        
        private BeginOperationDelegate onBeginGetAllCategorysDelegate;
        
        private EndOperationDelegate onEndGetAllCategorysDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCategorysCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddCategoryDelegate;
        
        private EndOperationDelegate onEndAddCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onAddCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCategoryDelegate;
        
        private EndOperationDelegate onEndDeleteCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCountOfCategoryDelegate;
        
        private EndOperationDelegate onEndGetCountOfCategoryDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountOfCategoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPagedQuestionsDelegate;
        
        private EndOperationDelegate onEndGetPagedQuestionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPagedQuestionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAnswersByIDDelegate;
        
        private EndOperationDelegate onEndGetAnswersByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAnswersByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchFaqsDelegate;
        
        private EndOperationDelegate onEndSearchFaqsDelegate;
        
        private System.Threading.SendOrPostCallback onSearchFaqsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllQuestionDelegate;
        
        private EndOperationDelegate onEndGetAllQuestionDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllQuestionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQuestionByIDDelegate;
        
        private EndOperationDelegate onEndGetQuestionByIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetQuestionByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAttachsByQIDDelegate;
        
        private EndOperationDelegate onEndGetAttachsByQIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetAttachsByQIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetImagesByQuestionIDDelegate;
        
        private EndOperationDelegate onEndGetImagesByQuestionIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetImagesByQuestionIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOrUpdateQuestionDelegate;
        
        private EndOperationDelegate onEndAddOrUpdateQuestionDelegate;
        
        private System.Threading.SendOrPostCallback onAddOrUpdateQuestionCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddAnswerDelegate;
        
        private EndOperationDelegate onEndAddAnswerDelegate;
        
        private System.Threading.SendOrPostCallback onAddAnswerCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFaq_AttachsDelegate;
        
        private EndOperationDelegate onEndAddFaq_AttachsDelegate;
        
        private System.Threading.SendOrPostCallback onAddFaq_AttachsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFaqByIDDelegate;
        
        private EndOperationDelegate onEndDeleteFaqByIDDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFaqByIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUsersDelegate;
        
        private EndOperationDelegate onEndGetAllUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetAllCategorysCompletedEventArgs> GetAllCategorysCompleted;
        
        public event System.EventHandler<AddCategoryCompletedEventArgs> AddCategoryCompleted;
        
        public event System.EventHandler<DeleteCategoryCompletedEventArgs> DeleteCategoryCompleted;
        
        public event System.EventHandler<GetCountOfCategoryCompletedEventArgs> GetCountOfCategoryCompleted;
        
        public event System.EventHandler<GetPagedQuestionsCompletedEventArgs> GetPagedQuestionsCompleted;
        
        public event System.EventHandler<GetAnswersByIDCompletedEventArgs> GetAnswersByIDCompleted;
        
        public event System.EventHandler<SearchFaqsCompletedEventArgs> SearchFaqsCompleted;
        
        public event System.EventHandler<GetAllQuestionCompletedEventArgs> GetAllQuestionCompleted;
        
        public event System.EventHandler<GetQuestionByIDCompletedEventArgs> GetQuestionByIDCompleted;
        
        public event System.EventHandler<GetAttachsByQIDCompletedEventArgs> GetAttachsByQIDCompleted;
        
        public event System.EventHandler<GetImagesByQuestionIDCompletedEventArgs> GetImagesByQuestionIDCompleted;
        
        public event System.EventHandler<AddOrUpdateQuestionCompletedEventArgs> AddOrUpdateQuestionCompleted;
        
        public event System.EventHandler<AddAnswerCompletedEventArgs> AddAnswerCompleted;
        
        public event System.EventHandler<AddFaq_AttachsCompletedEventArgs> AddFaq_AttachsCompleted;
        
        public event System.EventHandler<DeleteFaqByIDCompletedEventArgs> DeleteFaqByIDCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<GetAllUsersCompletedEventArgs> GetAllUsersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginGetAllCategorys(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCategorys(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_category> NPFaq.TestServiceReference.ITestService.EndGetAllCategorys(System.IAsyncResult result) {
            return base.Channel.EndGetAllCategorys(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCategorys(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginGetAllCategorys(callback, asyncState);
        }
        
        private object[] OnEndGetAllCategorys(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_category> retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndGetAllCategorys(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCategorysCompleted(object state) {
            if ((this.GetAllCategorysCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCategorysCompleted(this, new GetAllCategorysCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCategorysAsync() {
            this.GetAllCategorysAsync(null);
        }
        
        public void GetAllCategorysAsync(object userState) {
            if ((this.onBeginGetAllCategorysDelegate == null)) {
                this.onBeginGetAllCategorysDelegate = new BeginOperationDelegate(this.OnBeginGetAllCategorys);
            }
            if ((this.onEndGetAllCategorysDelegate == null)) {
                this.onEndGetAllCategorysDelegate = new EndOperationDelegate(this.OnEndGetAllCategorys);
            }
            if ((this.onGetAllCategorysCompletedDelegate == null)) {
                this.onGetAllCategorysCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCategorysCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCategorysDelegate, null, this.onEndGetAllCategorysDelegate, this.onGetAllCategorysCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginAddCategory(string categoryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddCategory(categoryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int NPFaq.TestServiceReference.ITestService.EndAddCategory(System.IAsyncResult result) {
            return base.Channel.EndAddCategory(result);
        }
        
        private System.IAsyncResult OnBeginAddCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string categoryName = ((string)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginAddCategory(categoryName, callback, asyncState);
        }
        
        private object[] OnEndAddCategory(System.IAsyncResult result) {
            int retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndAddCategory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddCategoryCompleted(object state) {
            if ((this.AddCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCategoryCompleted(this, new AddCategoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddCategoryAsync(string categoryName) {
            this.AddCategoryAsync(categoryName, null);
        }
        
        public void AddCategoryAsync(string categoryName, object userState) {
            if ((this.onBeginAddCategoryDelegate == null)) {
                this.onBeginAddCategoryDelegate = new BeginOperationDelegate(this.OnBeginAddCategory);
            }
            if ((this.onEndAddCategoryDelegate == null)) {
                this.onEndAddCategoryDelegate = new EndOperationDelegate(this.OnEndAddCategory);
            }
            if ((this.onAddCategoryCompletedDelegate == null)) {
                this.onAddCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginAddCategoryDelegate, new object[] {
                        categoryName}, this.onEndAddCategoryDelegate, this.onAddCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginDeleteCategory(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCategory(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool NPFaq.TestServiceReference.ITestService.EndDeleteCategory(System.IAsyncResult result) {
            return base.Channel.EndDeleteCategory(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginDeleteCategory(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteCategory(System.IAsyncResult result) {
            bool retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndDeleteCategory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteCategoryCompleted(object state) {
            if ((this.DeleteCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCategoryCompleted(this, new DeleteCategoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCategoryAsync(int id) {
            this.DeleteCategoryAsync(id, null);
        }
        
        public void DeleteCategoryAsync(int id, object userState) {
            if ((this.onBeginDeleteCategoryDelegate == null)) {
                this.onBeginDeleteCategoryDelegate = new BeginOperationDelegate(this.OnBeginDeleteCategory);
            }
            if ((this.onEndDeleteCategoryDelegate == null)) {
                this.onEndDeleteCategoryDelegate = new EndOperationDelegate(this.OnEndDeleteCategory);
            }
            if ((this.onDeleteCategoryCompletedDelegate == null)) {
                this.onDeleteCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCategoryDelegate, new object[] {
                        id}, this.onEndDeleteCategoryDelegate, this.onDeleteCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginGetCountOfCategory(int categoryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountOfCategory(categoryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int NPFaq.TestServiceReference.ITestService.EndGetCountOfCategory(System.IAsyncResult result) {
            return base.Channel.EndGetCountOfCategory(result);
        }
        
        private System.IAsyncResult OnBeginGetCountOfCategory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int categoryID = ((int)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginGetCountOfCategory(categoryID, callback, asyncState);
        }
        
        private object[] OnEndGetCountOfCategory(System.IAsyncResult result) {
            int retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndGetCountOfCategory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountOfCategoryCompleted(object state) {
            if ((this.GetCountOfCategoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountOfCategoryCompleted(this, new GetCountOfCategoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountOfCategoryAsync(int categoryID) {
            this.GetCountOfCategoryAsync(categoryID, null);
        }
        
        public void GetCountOfCategoryAsync(int categoryID, object userState) {
            if ((this.onBeginGetCountOfCategoryDelegate == null)) {
                this.onBeginGetCountOfCategoryDelegate = new BeginOperationDelegate(this.OnBeginGetCountOfCategory);
            }
            if ((this.onEndGetCountOfCategoryDelegate == null)) {
                this.onEndGetCountOfCategoryDelegate = new EndOperationDelegate(this.OnEndGetCountOfCategory);
            }
            if ((this.onGetCountOfCategoryCompletedDelegate == null)) {
                this.onGetCountOfCategoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountOfCategoryCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountOfCategoryDelegate, new object[] {
                        categoryID}, this.onEndGetCountOfCategoryDelegate, this.onGetCountOfCategoryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginGetPagedQuestions(int pageSize, int currentPage, int categoryID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPagedQuestions(pageSize, currentPage, categoryID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> NPFaq.TestServiceReference.ITestService.EndGetPagedQuestions(System.IAsyncResult result) {
            return base.Channel.EndGetPagedQuestions(result);
        }
        
        private System.IAsyncResult OnBeginGetPagedQuestions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int pageSize = ((int)(inValues[0]));
            int currentPage = ((int)(inValues[1]));
            int categoryID = ((int)(inValues[2]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginGetPagedQuestions(pageSize, currentPage, categoryID, callback, asyncState);
        }
        
        private object[] OnEndGetPagedQuestions(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndGetPagedQuestions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPagedQuestionsCompleted(object state) {
            if ((this.GetPagedQuestionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPagedQuestionsCompleted(this, new GetPagedQuestionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPagedQuestionsAsync(int pageSize, int currentPage, int categoryID) {
            this.GetPagedQuestionsAsync(pageSize, currentPage, categoryID, null);
        }
        
        public void GetPagedQuestionsAsync(int pageSize, int currentPage, int categoryID, object userState) {
            if ((this.onBeginGetPagedQuestionsDelegate == null)) {
                this.onBeginGetPagedQuestionsDelegate = new BeginOperationDelegate(this.OnBeginGetPagedQuestions);
            }
            if ((this.onEndGetPagedQuestionsDelegate == null)) {
                this.onEndGetPagedQuestionsDelegate = new EndOperationDelegate(this.OnEndGetPagedQuestions);
            }
            if ((this.onGetPagedQuestionsCompletedDelegate == null)) {
                this.onGetPagedQuestionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPagedQuestionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPagedQuestionsDelegate, new object[] {
                        pageSize,
                        currentPage,
                        categoryID}, this.onEndGetPagedQuestionsDelegate, this.onGetPagedQuestionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginGetAnswersByID(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAnswersByID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer> NPFaq.TestServiceReference.ITestService.EndGetAnswersByID(System.IAsyncResult result) {
            return base.Channel.EndGetAnswersByID(result);
        }
        
        private System.IAsyncResult OnBeginGetAnswersByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginGetAnswersByID(id, callback, asyncState);
        }
        
        private object[] OnEndGetAnswersByID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer> retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndGetAnswersByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAnswersByIDCompleted(object state) {
            if ((this.GetAnswersByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAnswersByIDCompleted(this, new GetAnswersByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAnswersByIDAsync(int id) {
            this.GetAnswersByIDAsync(id, null);
        }
        
        public void GetAnswersByIDAsync(int id, object userState) {
            if ((this.onBeginGetAnswersByIDDelegate == null)) {
                this.onBeginGetAnswersByIDDelegate = new BeginOperationDelegate(this.OnBeginGetAnswersByID);
            }
            if ((this.onEndGetAnswersByIDDelegate == null)) {
                this.onEndGetAnswersByIDDelegate = new EndOperationDelegate(this.OnEndGetAnswersByID);
            }
            if ((this.onGetAnswersByIDCompletedDelegate == null)) {
                this.onGetAnswersByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAnswersByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAnswersByIDDelegate, new object[] {
                        id}, this.onEndGetAnswersByIDDelegate, this.onGetAnswersByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginSearchFaqs(string keyWord, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchFaqs(keyWord, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> NPFaq.TestServiceReference.ITestService.EndSearchFaqs(System.IAsyncResult result) {
            return base.Channel.EndSearchFaqs(result);
        }
        
        private System.IAsyncResult OnBeginSearchFaqs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyWord = ((string)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginSearchFaqs(keyWord, callback, asyncState);
        }
        
        private object[] OnEndSearchFaqs(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndSearchFaqs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchFaqsCompleted(object state) {
            if ((this.SearchFaqsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchFaqsCompleted(this, new SearchFaqsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchFaqsAsync(string keyWord) {
            this.SearchFaqsAsync(keyWord, null);
        }
        
        public void SearchFaqsAsync(string keyWord, object userState) {
            if ((this.onBeginSearchFaqsDelegate == null)) {
                this.onBeginSearchFaqsDelegate = new BeginOperationDelegate(this.OnBeginSearchFaqs);
            }
            if ((this.onEndSearchFaqsDelegate == null)) {
                this.onEndSearchFaqsDelegate = new EndOperationDelegate(this.OnEndSearchFaqs);
            }
            if ((this.onSearchFaqsCompletedDelegate == null)) {
                this.onSearchFaqsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchFaqsCompleted);
            }
            base.InvokeAsync(this.onBeginSearchFaqsDelegate, new object[] {
                        keyWord}, this.onEndSearchFaqsDelegate, this.onSearchFaqsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginGetAllQuestion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllQuestion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> NPFaq.TestServiceReference.ITestService.EndGetAllQuestion(System.IAsyncResult result) {
            return base.Channel.EndGetAllQuestion(result);
        }
        
        private System.IAsyncResult OnBeginGetAllQuestion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginGetAllQuestion(callback, asyncState);
        }
        
        private object[] OnEndGetAllQuestion(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndGetAllQuestion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllQuestionCompleted(object state) {
            if ((this.GetAllQuestionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllQuestionCompleted(this, new GetAllQuestionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllQuestionAsync() {
            this.GetAllQuestionAsync(null);
        }
        
        public void GetAllQuestionAsync(object userState) {
            if ((this.onBeginGetAllQuestionDelegate == null)) {
                this.onBeginGetAllQuestionDelegate = new BeginOperationDelegate(this.OnBeginGetAllQuestion);
            }
            if ((this.onEndGetAllQuestionDelegate == null)) {
                this.onEndGetAllQuestionDelegate = new EndOperationDelegate(this.OnEndGetAllQuestion);
            }
            if ((this.onGetAllQuestionCompletedDelegate == null)) {
                this.onGetAllQuestionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllQuestionCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllQuestionDelegate, null, this.onEndGetAllQuestionDelegate, this.onGetAllQuestionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginGetQuestionByID(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQuestionByID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        NPFaq.TestServiceReference.faq_question NPFaq.TestServiceReference.ITestService.EndGetQuestionByID(System.IAsyncResult result) {
            return base.Channel.EndGetQuestionByID(result);
        }
        
        private System.IAsyncResult OnBeginGetQuestionByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginGetQuestionByID(id, callback, asyncState);
        }
        
        private object[] OnEndGetQuestionByID(System.IAsyncResult result) {
            NPFaq.TestServiceReference.faq_question retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndGetQuestionByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQuestionByIDCompleted(object state) {
            if ((this.GetQuestionByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQuestionByIDCompleted(this, new GetQuestionByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQuestionByIDAsync(int id) {
            this.GetQuestionByIDAsync(id, null);
        }
        
        public void GetQuestionByIDAsync(int id, object userState) {
            if ((this.onBeginGetQuestionByIDDelegate == null)) {
                this.onBeginGetQuestionByIDDelegate = new BeginOperationDelegate(this.OnBeginGetQuestionByID);
            }
            if ((this.onEndGetQuestionByIDDelegate == null)) {
                this.onEndGetQuestionByIDDelegate = new EndOperationDelegate(this.OnEndGetQuestionByID);
            }
            if ((this.onGetQuestionByIDCompletedDelegate == null)) {
                this.onGetQuestionByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQuestionByIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetQuestionByIDDelegate, new object[] {
                        id}, this.onEndGetQuestionByIDDelegate, this.onGetQuestionByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginGetAttachsByQID(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAttachsByQID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.Attach> NPFaq.TestServiceReference.ITestService.EndGetAttachsByQID(System.IAsyncResult result) {
            return base.Channel.EndGetAttachsByQID(result);
        }
        
        private System.IAsyncResult OnBeginGetAttachsByQID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginGetAttachsByQID(id, callback, asyncState);
        }
        
        private object[] OnEndGetAttachsByQID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.Attach> retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndGetAttachsByQID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAttachsByQIDCompleted(object state) {
            if ((this.GetAttachsByQIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAttachsByQIDCompleted(this, new GetAttachsByQIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAttachsByQIDAsync(int id) {
            this.GetAttachsByQIDAsync(id, null);
        }
        
        public void GetAttachsByQIDAsync(int id, object userState) {
            if ((this.onBeginGetAttachsByQIDDelegate == null)) {
                this.onBeginGetAttachsByQIDDelegate = new BeginOperationDelegate(this.OnBeginGetAttachsByQID);
            }
            if ((this.onEndGetAttachsByQIDDelegate == null)) {
                this.onEndGetAttachsByQIDDelegate = new EndOperationDelegate(this.OnEndGetAttachsByQID);
            }
            if ((this.onGetAttachsByQIDCompletedDelegate == null)) {
                this.onGetAttachsByQIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAttachsByQIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetAttachsByQIDDelegate, new object[] {
                        id}, this.onEndGetAttachsByQIDDelegate, this.onGetAttachsByQIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginGetImagesByQuestionID(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetImagesByQuestionID(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> NPFaq.TestServiceReference.ITestService.EndGetImagesByQuestionID(System.IAsyncResult result) {
            return base.Channel.EndGetImagesByQuestionID(result);
        }
        
        private System.IAsyncResult OnBeginGetImagesByQuestionID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginGetImagesByQuestionID(id, callback, asyncState);
        }
        
        private object[] OnEndGetImagesByQuestionID(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndGetImagesByQuestionID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetImagesByQuestionIDCompleted(object state) {
            if ((this.GetImagesByQuestionIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetImagesByQuestionIDCompleted(this, new GetImagesByQuestionIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetImagesByQuestionIDAsync(int id) {
            this.GetImagesByQuestionIDAsync(id, null);
        }
        
        public void GetImagesByQuestionIDAsync(int id, object userState) {
            if ((this.onBeginGetImagesByQuestionIDDelegate == null)) {
                this.onBeginGetImagesByQuestionIDDelegate = new BeginOperationDelegate(this.OnBeginGetImagesByQuestionID);
            }
            if ((this.onEndGetImagesByQuestionIDDelegate == null)) {
                this.onEndGetImagesByQuestionIDDelegate = new EndOperationDelegate(this.OnEndGetImagesByQuestionID);
            }
            if ((this.onGetImagesByQuestionIDCompletedDelegate == null)) {
                this.onGetImagesByQuestionIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImagesByQuestionIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetImagesByQuestionIDDelegate, new object[] {
                        id}, this.onEndGetImagesByQuestionIDDelegate, this.onGetImagesByQuestionIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginAddOrUpdateQuestion(NPFaq.TestServiceReference.faq_question question, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOrUpdateQuestion(question, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int NPFaq.TestServiceReference.ITestService.EndAddOrUpdateQuestion(System.IAsyncResult result) {
            return base.Channel.EndAddOrUpdateQuestion(result);
        }
        
        private System.IAsyncResult OnBeginAddOrUpdateQuestion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NPFaq.TestServiceReference.faq_question question = ((NPFaq.TestServiceReference.faq_question)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginAddOrUpdateQuestion(question, callback, asyncState);
        }
        
        private object[] OnEndAddOrUpdateQuestion(System.IAsyncResult result) {
            int retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndAddOrUpdateQuestion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddOrUpdateQuestionCompleted(object state) {
            if ((this.AddOrUpdateQuestionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOrUpdateQuestionCompleted(this, new AddOrUpdateQuestionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOrUpdateQuestionAsync(NPFaq.TestServiceReference.faq_question question) {
            this.AddOrUpdateQuestionAsync(question, null);
        }
        
        public void AddOrUpdateQuestionAsync(NPFaq.TestServiceReference.faq_question question, object userState) {
            if ((this.onBeginAddOrUpdateQuestionDelegate == null)) {
                this.onBeginAddOrUpdateQuestionDelegate = new BeginOperationDelegate(this.OnBeginAddOrUpdateQuestion);
            }
            if ((this.onEndAddOrUpdateQuestionDelegate == null)) {
                this.onEndAddOrUpdateQuestionDelegate = new EndOperationDelegate(this.OnEndAddOrUpdateQuestion);
            }
            if ((this.onAddOrUpdateQuestionCompletedDelegate == null)) {
                this.onAddOrUpdateQuestionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateQuestionCompleted);
            }
            base.InvokeAsync(this.onBeginAddOrUpdateQuestionDelegate, new object[] {
                        question}, this.onEndAddOrUpdateQuestionDelegate, this.onAddOrUpdateQuestionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginAddAnswer(NPFaq.TestServiceReference.faq_answer answer, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddAnswer(answer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int NPFaq.TestServiceReference.ITestService.EndAddAnswer(System.IAsyncResult result) {
            return base.Channel.EndAddAnswer(result);
        }
        
        private System.IAsyncResult OnBeginAddAnswer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NPFaq.TestServiceReference.faq_answer answer = ((NPFaq.TestServiceReference.faq_answer)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginAddAnswer(answer, callback, asyncState);
        }
        
        private object[] OnEndAddAnswer(System.IAsyncResult result) {
            int retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndAddAnswer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddAnswerCompleted(object state) {
            if ((this.AddAnswerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddAnswerCompleted(this, new AddAnswerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAnswerAsync(NPFaq.TestServiceReference.faq_answer answer) {
            this.AddAnswerAsync(answer, null);
        }
        
        public void AddAnswerAsync(NPFaq.TestServiceReference.faq_answer answer, object userState) {
            if ((this.onBeginAddAnswerDelegate == null)) {
                this.onBeginAddAnswerDelegate = new BeginOperationDelegate(this.OnBeginAddAnswer);
            }
            if ((this.onEndAddAnswerDelegate == null)) {
                this.onEndAddAnswerDelegate = new EndOperationDelegate(this.OnEndAddAnswer);
            }
            if ((this.onAddAnswerCompletedDelegate == null)) {
                this.onAddAnswerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddAnswerCompleted);
            }
            base.InvokeAsync(this.onBeginAddAnswerDelegate, new object[] {
                        answer}, this.onEndAddAnswerDelegate, this.onAddAnswerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginAddFaq_Attachs(System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_attach> attachs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFaq_Attachs(attachs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool NPFaq.TestServiceReference.ITestService.EndAddFaq_Attachs(System.IAsyncResult result) {
            return base.Channel.EndAddFaq_Attachs(result);
        }
        
        private System.IAsyncResult OnBeginAddFaq_Attachs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_attach> attachs = ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_attach>)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginAddFaq_Attachs(attachs, callback, asyncState);
        }
        
        private object[] OnEndAddFaq_Attachs(System.IAsyncResult result) {
            bool retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndAddFaq_Attachs(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFaq_AttachsCompleted(object state) {
            if ((this.AddFaq_AttachsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFaq_AttachsCompleted(this, new AddFaq_AttachsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFaq_AttachsAsync(System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_attach> attachs) {
            this.AddFaq_AttachsAsync(attachs, null);
        }
        
        public void AddFaq_AttachsAsync(System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_attach> attachs, object userState) {
            if ((this.onBeginAddFaq_AttachsDelegate == null)) {
                this.onBeginAddFaq_AttachsDelegate = new BeginOperationDelegate(this.OnBeginAddFaq_Attachs);
            }
            if ((this.onEndAddFaq_AttachsDelegate == null)) {
                this.onEndAddFaq_AttachsDelegate = new EndOperationDelegate(this.OnEndAddFaq_Attachs);
            }
            if ((this.onAddFaq_AttachsCompletedDelegate == null)) {
                this.onAddFaq_AttachsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFaq_AttachsCompleted);
            }
            base.InvokeAsync(this.onBeginAddFaq_AttachsDelegate, new object[] {
                        attachs}, this.onEndAddFaq_AttachsDelegate, this.onAddFaq_AttachsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginDeleteFaqByID(System.Collections.ObjectModel.ObservableCollection<int> faqID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFaqByID(faqID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool NPFaq.TestServiceReference.ITestService.EndDeleteFaqByID(System.IAsyncResult result) {
            return base.Channel.EndDeleteFaqByID(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFaqByID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<int> faqID = ((System.Collections.ObjectModel.ObservableCollection<int>)(inValues[0]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginDeleteFaqByID(faqID, callback, asyncState);
        }
        
        private object[] OnEndDeleteFaqByID(System.IAsyncResult result) {
            bool retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndDeleteFaqByID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteFaqByIDCompleted(object state) {
            if ((this.DeleteFaqByIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFaqByIDCompleted(this, new DeleteFaqByIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFaqByIDAsync(System.Collections.ObjectModel.ObservableCollection<int> faqID) {
            this.DeleteFaqByIDAsync(faqID, null);
        }
        
        public void DeleteFaqByIDAsync(System.Collections.ObjectModel.ObservableCollection<int> faqID, object userState) {
            if ((this.onBeginDeleteFaqByIDDelegate == null)) {
                this.onBeginDeleteFaqByIDDelegate = new BeginOperationDelegate(this.OnBeginDeleteFaqByID);
            }
            if ((this.onEndDeleteFaqByIDDelegate == null)) {
                this.onEndDeleteFaqByIDDelegate = new EndOperationDelegate(this.OnEndDeleteFaqByID);
            }
            if ((this.onDeleteFaqByIDCompletedDelegate == null)) {
                this.onDeleteFaqByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFaqByIDCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFaqByIDDelegate, new object[] {
                        faqID}, this.onEndDeleteFaqByIDDelegate, this.onDeleteFaqByIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginLogin(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool NPFaq.TestServiceReference.ITestService.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginLogin(userName, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            bool retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string userName, string password) {
            this.LoginAsync(userName, password, null);
        }
        
        public void LoginAsync(string userName, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        userName,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NPFaq.TestServiceReference.ITestService.BeginGetAllUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_user> NPFaq.TestServiceReference.ITestService.EndGetAllUsers(System.IAsyncResult result) {
            return base.Channel.EndGetAllUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((NPFaq.TestServiceReference.ITestService)(this)).BeginGetAllUsers(callback, asyncState);
        }
        
        private object[] OnEndGetAllUsers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_user> retVal = ((NPFaq.TestServiceReference.ITestService)(this)).EndGetAllUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUsersCompleted(object state) {
            if ((this.GetAllUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUsersAsync() {
            this.GetAllUsersAsync(null);
        }
        
        public void GetAllUsersAsync(object userState) {
            if ((this.onBeginGetAllUsersDelegate == null)) {
                this.onBeginGetAllUsersDelegate = new BeginOperationDelegate(this.OnBeginGetAllUsers);
            }
            if ((this.onEndGetAllUsersDelegate == null)) {
                this.onEndGetAllUsersDelegate = new EndOperationDelegate(this.OnEndGetAllUsers);
            }
            if ((this.onGetAllUsersCompletedDelegate == null)) {
                this.onGetAllUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUsersDelegate, null, this.onEndGetAllUsersDelegate, this.onGetAllUsersCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override NPFaq.TestServiceReference.ITestService CreateChannel() {
            return new TestServiceClientChannel(this);
        }
        
        private class TestServiceClientChannel : ChannelBase<NPFaq.TestServiceReference.ITestService>, NPFaq.TestServiceReference.ITestService {
            
            public TestServiceClientChannel(System.ServiceModel.ClientBase<NPFaq.TestServiceReference.ITestService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAllCategorys(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllCategorys", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_category> EndGetAllCategorys(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_category> _result = ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_category>)(base.EndInvoke("GetAllCategorys", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddCategory(string categoryName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = categoryName;
                System.IAsyncResult _result = base.BeginInvoke("AddCategory", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddCategory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteCategory(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteCategory", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteCategory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCountOfCategory(int categoryID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = categoryID;
                System.IAsyncResult _result = base.BeginInvoke("GetCountOfCategory", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetCountOfCategory(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetCountOfCategory", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPagedQuestions(int pageSize, int currentPage, int categoryID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = pageSize;
                _args[1] = currentPage;
                _args[2] = categoryID;
                System.IAsyncResult _result = base.BeginInvoke("GetPagedQuestions", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> EndGetPagedQuestions(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> _result = ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question>)(base.EndInvoke("GetPagedQuestions", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAnswersByID(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetAnswersByID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer> EndGetAnswersByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer> _result = ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_answer>)(base.EndInvoke("GetAnswersByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSearchFaqs(string keyWord, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyWord;
                System.IAsyncResult _result = base.BeginInvoke("SearchFaqs", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> EndSearchFaqs(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> _result = ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question>)(base.EndInvoke("SearchFaqs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllQuestion(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllQuestion", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> EndGetAllQuestion(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question> _result = ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_question>)(base.EndInvoke("GetAllQuestion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetQuestionByID(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetQuestionByID", _args, callback, asyncState);
                return _result;
            }
            
            public NPFaq.TestServiceReference.faq_question EndGetQuestionByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                NPFaq.TestServiceReference.faq_question _result = ((NPFaq.TestServiceReference.faq_question)(base.EndInvoke("GetQuestionByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAttachsByQID(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetAttachsByQID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.Attach> EndGetAttachsByQID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.Attach> _result = ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.Attach>)(base.EndInvoke("GetAttachsByQID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetImagesByQuestionID(int id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetImagesByQuestionID", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetImagesByQuestionID(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetImagesByQuestionID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddOrUpdateQuestion(NPFaq.TestServiceReference.faq_question question, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = question;
                System.IAsyncResult _result = base.BeginInvoke("AddOrUpdateQuestion", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddOrUpdateQuestion(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddOrUpdateQuestion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddAnswer(NPFaq.TestServiceReference.faq_answer answer, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = answer;
                System.IAsyncResult _result = base.BeginInvoke("AddAnswer", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddAnswer(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddAnswer", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddFaq_Attachs(System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_attach> attachs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = attachs;
                System.IAsyncResult _result = base.BeginInvoke("AddFaq_Attachs", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddFaq_Attachs(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddFaq_Attachs", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFaqByID(System.Collections.ObjectModel.ObservableCollection<int> faqID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = faqID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFaqByID", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteFaqByID(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteFaqByID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string userName, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userName;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllUsers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_user> EndGetAllUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_user> _result = ((System.Collections.ObjectModel.ObservableCollection<NPFaq.TestServiceReference.faq_user>)(base.EndInvoke("GetAllUsers", _args, result)));
                return _result;
            }
        }
    }
}
